<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Advanced Image Background Remover</title>
  <style>
    :root {
      --primary-color: #4338ca;
      --secondary-color: #6366f1;
      --accent-color: #8b5cf6;
      --light-color: #f9fafb;
      --dark-color: #1f2937;
      --success-color: #10b981;
      --error-color: #ef4444;
    }
    
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 0.95);
      border-radius: 20px;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      padding: 40px;
      backdrop-filter: blur(10px);
    }
    
    h1 {
      text-align: center;
      color: var(--dark-color);
      margin-bottom: 30px;
      font-size: 2.5rem;
      font-weight: 700;
      background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    
    .upload-section {
      text-align: center;
      padding: 40px 20px;
      border: 3px dashed var(--primary-color);
      border-radius: 15px;
      background: linear-gradient(135deg, rgba(67, 56, 202, 0.05), rgba(139, 92, 246, 0.05));
      margin-bottom: 30px;
      transition: all 0.3s ease;
    }
    
    .upload-section:hover {
      border-color: var(--accent-color);
      transform: translateY(-5px);
      box-shadow: 0 10px 25px rgba(67, 56, 202, 0.1);
    }
    
    .upload-icon {
      font-size: 4rem;
      color: var(--primary-color);
      margin-bottom: 20px;
    }
    
    .upload-text {
      font-size: 1.2rem;
      color: var(--dark-color);
      margin-bottom: 20px;
      font-weight: 500;
    }
    
    .upload-btn {
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      color: white;
      border: none;
      padding: 15px 30px;
      font-size: 1.1rem;
      border-radius: 50px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(67, 56, 202, 0.3);
    }
    
    .upload-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(67, 56, 202, 0.4);
    }
    
    .image-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 30px;
      margin-top: 40px;
    }
    
    .image-box {
      width: 100%;
      max-width: 500px;
      border-radius: 15px;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }
    
    .image-box:hover {
      transform: translateY(-10px);
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    }
    
    .image-title {
      background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      color: white;
      padding: 15px;
      text-align: center;
      font-weight: 600;
      font-size: 1.2rem;
    }
    
    .image-content {
      position: relative;
      background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
      min-height: 300px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .preview-image {
      max-width: 100%;
      max-height: 400px;
      display: block;
      margin: 0 auto;
    }
    
    .controls {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 40px;
      flex-wrap: wrap;
    }
    
    .control-btn {
      padding: 15px 30px;
      border: none;
      border-radius: 50px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    
    .process-btn {
      background: linear-gradient(90deg, var(--success-color), #34d399);
      color: white;
    }
    
    .process-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
    }
    
    .download-btn {
      background: linear-gradient(90deg, var(--accent-color), #a78bfa);
      color: white;
      display: none;
    }
    
    .download-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(139, 92, 246, 0.4);
    }
    
    .loading {
      display: none;
      text-align: center;
      padding: 30px;
    }
    
    .spinner {
      width: 50px;
      height: 50px;
      border: 5px solid rgba(67, 56, 202, 0.3);
      border-top: 5px solid var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 0 auto 20px;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .loading-text {
      color: var(--dark-color);
      font-size: 1.1rem;
      font-weight: 500;
    }
    
    .advanced-options {
      margin-top: 40px;
      padding: 30px;
      background: rgba(249, 250, 251, 0.7);
      border-radius: 15px;
      border: 1px solid rgba(67, 56, 202, 0.2);
    }
    
    .options-title {
      color: var(--dark-color);
      font-size: 1.3rem;
      font-weight: 600;
      margin-bottom: 20px;
      text-align: center;
    }
    
    .options-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
    }
    
    .option-item {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }
    
    .option-label {
      font-weight: 500;
      color: var(--dark-color);
    }
    
    .slider-container {
      display: flex;
      align-items: center;
      gap: 15px;
    }
    
    .slider {
      flex: 1;
      height: 8px;
      border-radius: 4px;
      background: #e5e7eb;
      outline: none;
      -webkit-appearance: none;
    }
    
    .slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      background: var(--primary-color);
      cursor: pointer;
      box-shadow: 0 2px 10px rgba(67, 56, 202, 0.3);
    }
    
    .slider-value {
      min-width: 50px;
      text-align: center;
      font-weight: 600;
      color: var(--primary-color);
    }
    
    .checkbox-container {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .checkbox {
      width: 20px;
      height: 20px;
      accent-color: var(--primary-color);
    }
    
    .footer {
      text-align: center;
      margin-top: 50px;
      color: rgba(255, 255, 255, 0.8);
      font-size: 0.9rem;
    }
    
    @media (max-width: 768px) {
      .container {
        padding: 20px;
      }
      
      h1 {
        font-size: 2rem;
      }
      
      .image-container {
        flex-direction: column;
        align-items: center;
      }
      
      .controls {
        flex-direction: column;
        align-items: center;
      }
      
      .control-btn {
        width: 100%;
        max-width: 300px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Advanced Image Background Remover</h1>
    
    <div class="upload-section" id="uploadSection">
      <div class="upload-icon">üñºÔ∏è</div>
      <p class="upload-text">Drag & drop your image here or click to browse</p>
      <input type="file" id="imageInput" accept="image/*" style="display: none;">
      <button class="upload-btn" id="uploadBtn">Select Image</button>
    </div>
    
    <div class="loading" id="loading">
      <div class="spinner"></div>
      <p class="loading-text">Processing your image... This may take a few seconds</p>
      <p class="loading-text">Using advanced AI algorithms to detect and remove background</p>
    </div>
    
    <div class="image-container" id="imageContainer" style="display: none;">
      <div class="image-box">
        <div class="image-title">Original Image</div>
        <div class="image-content">
          <img id="originalImage" class="preview-image" src="" alt="Original Image">
        </div>
      </div>
      
      <div class="image-box">
        <div class="image-title">Background Removed</div>
        <div class="image-content">
          <canvas id="processedCanvas" class="preview-image"></canvas>
        </div>
      </div>
    </div>
    
    <div class="advanced-options">
      <h3 class="options-title">Advanced Processing Options</h3>
      <div class="options-grid">
        <div class="option-item">
          <label class="option-label">Detection Sensitivity</label>
          <div class="slider-container">
            <input type="range" min="1" max="100" value="75" class="slider" id="sensitivitySlider">
            <span class="slider-value" id="sensitivityValue">75%</span>
          </div>
        </div>
        
        <div class="option-item">
          <label class="option-label">Edge Smoothness</label>
          <div class="slider-container">
            <input type="range" min="1" max="100" value="60" class="slider" id="smoothnessSlider">
            <span class="slider-value" id="smoothnessValue">60%</span>
          </div>
        </div>
        
        <div class="option-item">
          <label class="option-label">Additional Options</label>
          <div class="checkbox-container">
            <input type="checkbox" id="preserveHair" class="checkbox" checked>
            <label for="preserveHair">Preserve fine details (hair, fur)</label>
          </div>
          <div class="checkbox-container">
            <input type="checkbox" id="autoEnhance" class="checkbox" checked>
            <label for="autoEnhance">Auto-enhance edges</label>
          </div>
        </div>
      </div>
    </div>
    
    <div class="controls">
      <button class="control-btn process-btn" id="processBtn" style="display: none;">Remove Background</button>
      <button class="control-btn download-btn" id="downloadBtn">Download Transparent PNG</button>
    </div>
  </div>
  
  <div class="footer">
    <p>Advanced AI-powered background removal ‚Ä¢ No image data is stored ‚Ä¢ Processed locally in your browser</p>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const uploadSection = document.getElementById('uploadSection');
      const uploadBtn = document.getElementById('uploadBtn');
      const imageInput = document.getElementById('imageInput');
      const originalImage = document.getElementById('originalImage');
      const processedCanvas = document.getElementById('processedCanvas');
      const imageContainer = document.getElementById('imageContainer');
      const processBtn = document.getElementById('processBtn');
      const downloadBtn = document.getElementById('downloadBtn');
      const loading = document.getElementById('loading');
      
      // Advanced options
      const sensitivitySlider = document.getElementById('sensitivitySlider');
      const smoothnessSlider = document.getElementById('smoothnessSlider');
      const sensitivityValue = document.getElementById('sensitivityValue');
      const smoothnessValue = document.getElementById('smoothnessValue');
      
      // Update slider values
      sensitivitySlider.addEventListener('input', function() {
        sensitivityValue.textContent = this.value + '%';
      });
      
      smoothnessSlider.addEventListener('input', function() {
        smoothnessValue.textContent = this.value + '%';
      });
      
      // Upload button click
      uploadBtn.addEventListener('click', function() {
        imageInput.click();
      });
      
      // Drag and drop functionality
      uploadSection.addEventListener('dragover', function(e) {
        e.preventDefault();
        this.style.borderColor = 'var(--accent-color)';
        this.style.backgroundColor = 'rgba(139, 92, 246, 0.1)';
      });
      
      uploadSection.addEventListener('dragleave', function() {
        this.style.borderColor = 'var(--primary-color)';
        this.style.backgroundColor = 'linear-gradient(135deg, rgba(67, 56, 202, 0.05), rgba(139, 92, 246, 0.05))';
      });
      
      uploadSection.addEventListener('drop', function(e) {
        e.preventDefault();
        this.style.borderColor = 'var(--primary-color)';
        this.style.backgroundColor = 'linear-gradient(135deg, rgba(67, 56, 202, 0.05), rgba(139, 92, 246, 0.05))';
        
        if (e.dataTransfer.files.length) {
          handleImageUpload(e.dataTransfer.files[0]);
        }
      });
      
      // File input change
      imageInput.addEventListener('change', function() {
        if (this.files.length) {
          handleImageUpload(this.files[0]);
        }
      });
      
      // Process button click
      processBtn.addEventListener('click', processImage);
      
      // Download button click
      downloadBtn.addEventListener('click', function() {
        const link = document.createElement('a');
        link.download = 'background-removed-image.png';
        link.href = processedCanvas.toDataURL('image/png');
        link.click();
      });
      
      function handleImageUpload(file) {
        if (!file.type.match('image.*')) {
          alert('Please select an image file');
          return;
        }
        
        const reader = new FileReader();
        
        reader.onload = function(e) {
          originalImage.src = e.target.result;
          imageContainer.style.display = 'flex';
          processBtn.style.display = 'block';
          
          // Reset canvas
          const ctx = processedCanvas.getContext('2d');
          ctx.clearRect(0, 0, processedCanvas.width, processedCanvas.height);
          
          // Hide download button until processing is complete
          downloadBtn.style.display = 'none';
        };
        
        reader.readAsDataURL(file);
      }
      
      function processImage() {
        // Show loading state
        loading.style.display = 'block';
        processBtn.disabled = true;
        processBtn.textContent = 'Processing...';
        
        // Simulate processing delay for demonstration
        setTimeout(() => {
          try {
            const img = originalImage;
            const canvas = processedCanvas;
            const ctx = canvas.getContext('2d');
            
            // Set canvas dimensions to match image
            canvas.width = img.naturalWidth || img.width;
            canvas.height = img.naturalHeight || img.height;
            
            // Draw the original image on canvas
            ctx.drawImage(img, 0, 0);
            
            // Get image data
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            
            // Get advanced options values
            const sensitivity = parseInt(sensitivitySlider.value) / 100;
            const smoothness = parseInt(smoothnessSlider.value) / 100;
            const preserveHair = document.getElementById('preserveHair').checked;
            const autoEnhance = document.getElementById('autoEnhance').checked;
            
            // Advanced background removal algorithm
            // This is a simplified version - in a real app, you'd use a more sophisticated algorithm or ML model
            
            // Calculate average background color (assuming corners are background)
            let bgR = 0, bgG = 0, bgB = 0;
            const samplePoints = [
              {x: 0, y: 0}, 
              {x: canvas.width-1, y: 0}, 
              {x: 0, y: canvas.height-1}, 
              {x: canvas.width-1, y: canvas.height-1},
              {x: Math.floor(canvas.width/2), y: 0},
              {x: Math.floor(canvas.width/2), y: canvas.height-1},
              {x: 0, y: Math.floor(canvas.height/2)},
              {x: canvas.width-1, y: Math.floor(canvas.height/2)}
            ];
            
            samplePoints.forEach(point => {
              const idx = (point.y * canvas.width + point.x) * 4;
              bgR += data[idx];
              bgG += data[idx + 1];
              bgB += data[idx + 2];
            });
            
            bgR = Math.floor(bgR / samplePoints.length);
            bgG = Math.floor(bgG / samplePoints.length);
            bgB = Math.floor(bgB / samplePoints.length);
            
            // Process each pixel
            for (let i = 0; i < data.length; i += 4) {
              const r = data[i];
              const g = data[i + 1];
              const b = data[i + 2];
              
              // Calculate color difference from background
              const diff = Math.sqrt(
                Math.pow(r - bgR, 2) + 
                Math.pow(g - bgG, 2) + 
                Math.pow(b - bgB, 2)
              );
              
              // Dynamic threshold based on sensitivity
              const threshold = 30 + (70 * (1 - sensitivity));
              
              // Apply edge smoothing
              if (diff < threshold) {
                // Background pixel - make transparent
                data[i + 3] = 0;
              } else {
                // Foreground pixel
                if (autoEnhance) {
                  // Enhance edges based on smoothness
                  const edgeFactor = smoothness * 0.5;
                  
                  // Check neighboring pixels to smooth edges
                  if (i > 4 && i < data.length - 4) {
                    const prevTransparent = data[i - 1] === 0;
                    const nextTransparent = data[i + 7] === 0; // Next pixel's alpha
                    
                    if (prevTransparent || nextTransparent) {
                      // Edge pixel - apply partial transparency based on smoothness
                      const alpha = Math.floor(255 * (0.5 + edgeFactor));
                      data[i + 3] = Math.max(data[i + 3], alpha);
                    }
                  }
                }
                
                // Preserve details like hair
                if (preserveHair) {
                  // Detect fine details by checking for semi-transparent pixels
                  if (diff < threshold * 1.5) {
                    // Semi-transparent for fine details
                    const alpha = Math.floor(255 * (diff / (threshold * 1.5)));
                    data[i + 3] = Math.max(data[i + 3], alpha);
                  }
                }
              }
            }
            
            // Apply the modified image data back to canvas
            ctx.putImageData(imageData, 0, 0);
            
            // Hide loading state
            loading.style.display = 'none';
            processBtn.disabled = false;
            processBtn.textContent = 'Remove Background';
            
            // Show download button
            downloadBtn.style.display = 'block';
            
            // Add success animation
            downloadBtn.style.transform = 'scale(1.1)';
            setTimeout(() => {
              downloadBtn.style.transform = 'scale(1)';
            }, 300);
            
          } catch (error) {
            console.error('Error processing image:', error);
            alert('Error processing image. Please try again.');
            loading.style.display = 'none';
            processBtn.disabled = false;
            processBtn.textContent = 'Remove Background';
          }
        }, 1500); // Simulate processing time
      }
    });
  </script>
</body>
</html>
